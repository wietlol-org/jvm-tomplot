// hash: #c8ae83dc
// data: serializationKey:6d74510f-b47e-4e03-a0a3-cab3e0ca95ce
// @formatter:off

package me.wietlol.tomplot.kotlin.data.models

import java.util.UUID
import me.wietlol.bitblock.api.serialization.BitSerializable
import me.wietlol.utils.common.Jsonable
import me.wietlol.utils.common.emptyHashCode
import me.wietlol.utils.common.toJsonString
import me.wietlol.utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq
// @tomplot:customCode:end
// @formatter:off

interface KtInterface : BitSerializable, KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("serializationKey")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val name: String
	
	val generics: List<KtGenericTypeDeclaration>
	
	val superTypes: List<KtTypeReference>
	
	val isSealed: Boolean
	
	val visibility: KtVisibility
	
	val members: List<KtInterfaceMember>
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is KtInterface) return false
		
		if (name != other.name) return false
		if (generics != other.generics) return false
		if (superTypes != other.superTypes) return false
		if (isSealed != other.isSealed) return false
		if (visibility != other.visibility) return false
		if (members != other.members) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(name)
			.with(generics)
			.with(superTypes)
			.with(isSealed)
			.with(visibility)
			.with(members)
	
	override fun toJson(): String =
		"""{"name":${name.toJsonString()},"generics":${generics.toJsonString()},"superTypes":${superTypes.toJsonString()},"isSealed":${isSealed.toJsonString()},"visibility":${visibility.toJsonString()},"members":${members.toJsonString()}}"""
	
	override fun duplicate(): KtInterface
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
