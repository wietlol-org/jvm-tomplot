// hash: #f122599f
// @formatter:off

package me.wietlol.tomplot.kotlin.data.serializers

import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import me.wietlol.bitblock.api.serialization.DeserializationContext
import me.wietlol.bitblock.api.serialization.ModelSerializer
import me.wietlol.bitblock.api.serialization.Schema
import me.wietlol.bitblock.api.serialization.SerializationContext
import me.wietlol.bitblock.api.serialization.deserialize
import me.wietlol.tomplot.kotlin.data.builders.KtFunctionBuilder
import me.wietlol.tomplot.kotlin.data.models.*
import me.wietlol.tomplot.kotlin.data.models.KtFunction
import me.wietlol.utils.common.streams.readUnsignedVarInt
import me.wietlol.utils.common.streams.writeUnsignedVarInt

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object KtFunctionSerializer : ModelSerializer<KtFunction, KtFunction>
{
	private val endOfObject: Int = 0
	
	private val nameIndex: Int = 1
	
	private val parametersIndex: Int = 2
	
	private val returnTypeIndex: Int = 3
	
	private val bodyIndex: Int = 4
	
	private val isOverrideIndex: Int = 5
	
	private val isExpressionBodyIndex: Int = 6
	
	private val visibilityIndex: Int = 7
	
	override val modelId: UUID
		get() = KtFunction.serializationKey
	
	override val dataClass: Class<KtFunction>
		get() = KtFunction::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: KtFunction)
	{
		stream.writeUnsignedVarInt(nameIndex)
		schema.serialize(serializationContext, stream, entity.name)
		
		stream.writeUnsignedVarInt(parametersIndex)
		schema.serialize(serializationContext, stream, entity.parameters)
		
		entity.returnType?.also {
			stream.writeUnsignedVarInt(returnTypeIndex)
			schema.serialize(serializationContext, stream, it)
		}
		
		entity.body?.also {
			stream.writeUnsignedVarInt(bodyIndex)
			schema.serialize(serializationContext, stream, it)
		}
		
		stream.writeUnsignedVarInt(isOverrideIndex)
		schema.serialize(serializationContext, stream, entity.isOverride)
		
		stream.writeUnsignedVarInt(isExpressionBodyIndex)
		schema.serialize(serializationContext, stream, entity.isExpressionBody)
		
		stream.writeUnsignedVarInt(visibilityIndex)
		schema.serialize(serializationContext, stream, entity.visibility)
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): KtFunction
	{
		var name: String? = null
		var parameters: MutableList<KtParameter>? = mutableListOf()
		var returnType: KtTypeReference? = null
		var body: MutableList<KtExpression>? = null
		var isOverride: Boolean? = null
		var isExpressionBody: Boolean? = null
		var visibility: KtVisibility? = null
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultKtFunction(
					name!!,
					parameters!!.toMutableList(),
					returnType,
					body?.toMutableList(),
					isOverride!!,
					isExpressionBody!!,
					visibility!!,
				)
				nameIndex -> name = schema.deserialize(deserializationContext, stream)
				parametersIndex -> parameters = schema.deserialize(deserializationContext, stream)
				returnTypeIndex -> returnType = schema.deserialize(deserializationContext, stream)
				bodyIndex -> body = schema.deserialize(deserializationContext, stream)
				isOverrideIndex -> isOverride = schema.deserialize(deserializationContext, stream)
				isExpressionBodyIndex -> isExpressionBody = schema.deserialize(deserializationContext, stream)
				visibilityIndex -> visibility = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
