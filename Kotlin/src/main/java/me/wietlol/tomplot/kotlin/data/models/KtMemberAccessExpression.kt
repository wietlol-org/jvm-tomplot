// hash: #94d5b615
// data: serializationKey:9903d964-65bc-48fd-a5ea-d1612c8e8239
// @formatter:off

package me.wietlol.tomplot.kotlin.data.models

import java.util.UUID
import me.wietlol.bitblock.api.serialization.BitSerializable
import me.wietlol.utils.common.Jsonable
import me.wietlol.utils.common.emptyHashCode
import me.wietlol.utils.common.toJsonString
import me.wietlol.utils.common.with

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:gAeCSq
// @tomplot:customCode:end
// @formatter:off

interface KtMemberAccessExpression : BitSerializable, KtExpression, Jsonable
{
	companion object
	{
		val serializationKey: UUID
			get() = UUID.fromString("serializationKey")
	}
	
	override val serializationKey: UUID
		get() = Companion.serializationKey
	
	val supplier: KtExpression
	
	val memberName: String
	
	val isConditionalAccess: Boolean
	
	val isReferencingAccess: Boolean
	
	fun isEqualTo(other: Any?): Boolean
	{
		if (this === other) return true
		if (other == null) return false
		if (other !is KtMemberAccessExpression) return false
		
		if (supplier != other.supplier) return false
		if (memberName != other.memberName) return false
		if (isConditionalAccess != other.isConditionalAccess) return false
		if (isReferencingAccess != other.isReferencingAccess) return false
		
		return true
	}
	
	fun computeHashCode(): Int =
		emptyHashCode
			.with(supplier)
			.with(memberName)
			.with(isConditionalAccess)
			.with(isReferencingAccess)
	
	override fun toJson(): String =
		"""{"supplier":${supplier.toJsonString()},"memberName":${memberName.toJsonString()},"isConditionalAccess":${isConditionalAccess.toJsonString()},"isReferencingAccess":${isReferencingAccess.toJsonString()}}"""
	
	override fun duplicate(): KtMemberAccessExpression
	
	// @formatter:on
	// @tomplot:customCode:start:32T3K8
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
