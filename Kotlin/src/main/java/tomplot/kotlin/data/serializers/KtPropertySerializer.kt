// hash: #0427f41d
// @formatter:off

package tomplot.kotlin.data.serializers

import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import bitblock.api.serialization.DeserializationContext
import bitblock.api.serialization.ModelSerializer
import bitblock.api.serialization.Schema
import bitblock.api.serialization.SerializationContext
import bitblock.api.serialization.deserialize
import tomplot.kotlin.data.builders.KtPropertyBuilder
import tomplot.kotlin.data.models.*
import tomplot.kotlin.data.models.KtProperty
import utils.common.streams.readUnsignedVarInt
import utils.common.streams.writeUnsignedVarInt

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object KtPropertySerializer : ModelSerializer<KtProperty, KtProperty>
{
	private val endOfObject: Int = 0
	
	private val nameIndex: Int = 1
	
	private val typeIndex: Int = 2
	
	private val isOverrideIndex: Int = 3
	
	private val upperBoundIndex: Int = 4
	
	private val getterIndex: Int = 5
	
	private val visibilityIndex: Int = 6
	
	private val initialValueIndex: Int = 7
	
	override val modelId: UUID
		get() = KtProperty.serializationKey
	
	override val dataClass: Class<KtProperty>
		get() = KtProperty::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: KtProperty)
	{
		stream.writeUnsignedVarInt(nameIndex)
		schema.serialize(serializationContext, stream, entity.name)
		
		stream.writeUnsignedVarInt(typeIndex)
		schema.serialize(serializationContext, stream, entity.type)
		
		stream.writeUnsignedVarInt(isOverrideIndex)
		schema.serialize(serializationContext, stream, entity.isOverride)
		
		stream.writeUnsignedVarInt(upperBoundIndex)
		schema.serialize(serializationContext, stream, entity.upperBound)
		
		entity.getter?.also {
			stream.writeUnsignedVarInt(getterIndex)
			schema.serialize(serializationContext, stream, it)
		}
		
		stream.writeUnsignedVarInt(visibilityIndex)
		schema.serialize(serializationContext, stream, entity.visibility)
		
		entity.initialValue?.also {
			stream.writeUnsignedVarInt(initialValueIndex)
			schema.serialize(serializationContext, stream, it)
		}
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): KtProperty
	{
		var name: String? = null
		var type: KtPropertyType? = null
		var isOverride: Boolean? = null
		var upperBound: KtTypeReference? = null
		var getter: KtExpression? = null
		var visibility: KtVisibility? = null
		var initialValue: KtExpression? = null
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultKtProperty(
					name!!,
					type!!,
					isOverride!!,
					upperBound!!,
					getter,
					visibility!!,
					initialValue,
				)
				nameIndex -> name = schema.deserialize(deserializationContext, stream)
				typeIndex -> type = schema.deserialize(deserializationContext, stream)
				isOverrideIndex -> isOverride = schema.deserialize(deserializationContext, stream)
				upperBoundIndex -> upperBound = schema.deserialize(deserializationContext, stream)
				getterIndex -> getter = schema.deserialize(deserializationContext, stream)
				visibilityIndex -> visibility = schema.deserialize(deserializationContext, stream)
				initialValueIndex -> initialValue = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
