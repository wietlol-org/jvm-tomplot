// hash: #e19ff7c4
// @formatter:off

package tomplot.kotlin.data.serializers

import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import bitblock.api.serialization.DeserializationContext
import bitblock.api.serialization.ModelSerializer
import bitblock.api.serialization.Schema
import bitblock.api.serialization.SerializationContext
import bitblock.api.serialization.deserialize
import tomplot.kotlin.data.builders.KtFunctionTypeReferenceBuilder
import tomplot.kotlin.data.models.*
import tomplot.kotlin.data.models.KtFunctionTypeReference
import utils.common.streams.readUnsignedVarInt
import utils.common.streams.writeUnsignedVarInt

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object KtFunctionTypeReferenceSerializer : ModelSerializer<KtFunctionTypeReference, KtFunctionTypeReference>
{
	private val endOfObject: Int = 0
	
	private val parametersIndex: Int = 1
	
	private val resultIndex: Int = 2
	
	private val isNullableIndex: Int = 3
	
	private val scopeIndex: Int = 4
	
	override val modelId: UUID
		get() = KtFunctionTypeReference.serializationKey
	
	override val dataClass: Class<KtFunctionTypeReference>
		get() = KtFunctionTypeReference::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: KtFunctionTypeReference)
	{
		stream.writeUnsignedVarInt(parametersIndex)
		schema.serialize(serializationContext, stream, entity.parameters)
		
		stream.writeUnsignedVarInt(resultIndex)
		schema.serialize(serializationContext, stream, entity.result)
		
		stream.writeUnsignedVarInt(isNullableIndex)
		schema.serialize(serializationContext, stream, entity.isNullable)
		
		entity.scope?.also {
			stream.writeUnsignedVarInt(scopeIndex)
			schema.serialize(serializationContext, stream, it)
		}
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): KtFunctionTypeReference
	{
		var parameters: MutableList<KtTypeReference>? = mutableListOf()
		var result: KtTypeReference? = null
		var isNullable: Boolean? = null
		var scope: KtTypeReference? = null
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultKtFunctionTypeReference(
					parameters!!.toMutableList(),
					result!!,
					isNullable!!,
					scope,
				)
				parametersIndex -> parameters = schema.deserialize(deserializationContext, stream)
				resultIndex -> result = schema.deserialize(deserializationContext, stream)
				isNullableIndex -> isNullable = schema.deserialize(deserializationContext, stream)
				scopeIndex -> scope = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
