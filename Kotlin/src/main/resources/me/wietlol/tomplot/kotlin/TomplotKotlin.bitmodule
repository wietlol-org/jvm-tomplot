
@Module("TomplotKotlin")
@Owner("Wietlol")
@Version("1.0")

@Root("../../../../../java")

@RootPackage("me.wietlol.tomplot.kotlin.data")
@BuilderPackage(".builders")
@ModelPackage(".models")
@SerializerPackage(".serializers")

;

@Import("me.wietlol.tomplot.api.data.TomplotElement")
contract KtElement : TomplotElement {
}

contract KtComponent : KtElement {
}

blueprint KtScript : KtComponent {
	property(1) name: String
	property(2) package: KtPackage?
	property(3) imports: List<KtImport>
	property(4) templatedValues: List<KtTemplatedValue>
	property(5) members: List<KtScriptMember>
	property(6) sourceFolder: String
}

blueprint KtPackage : KtElement {
	property(1) path: List<String>
}

blueprint KtImport : KtElement {
	property(1) path: List<String>
	property(2) isStarImport: Boolean
	property(3) alias: String?
}

blueprint KtTemplatedValue : KtElement {
	property(1) key: String
	property(2) valueProvider: KtValueProvider
}

contract KtInterfaceMember : KtElement {}
contract KtObjectMember : KtElement {}
contract KtClassMember : KtElement {}
contract KtScriptMember : KtElement {}

blueprint KtComment : KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) text: List<String>
}

blueprint KtCustomCode : KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) id: String
}

blueprint KtFunction : KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) name: String
    property(2) parameters: List<KtParameter>
    property(3) returnType: KtTypeReference?
    property(4) body: List<KtExpression>?
    property(5) isOverride: Boolean
    property(6) isExpressionBody: Boolean
    property(7) visibility: KtVisibility
}

blueprint KtInterface : KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) name: String
	property(2) generics: List<KtGenericTypeDeclaration>
	property(3) superTypes: List<KtTypeReference>
	property(4) isSealed: Boolean
	property(5) visibility: KtVisibility
	property(6) members: List<KtInterfaceMember>
}

blueprint KtObject : KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) name: String?
	property(2) superTypes: List<KtTypeReference>
	property(3) isCompanion: Boolean
	property(4) visibility: KtVisibility
	property(5) members: List<KtObjectMember>
}

blueprint KtProperty : KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) name: String
	property(2) type: KtPropertyType
	property(3) isOverride: Boolean
	property(4) upperBound: KtTypeReference
	property(5) getter: KtExpression?
	property(6) visibility: KtVisibility
	property(7) initialValue: KtExpression?
}

blueprint KtParameter : KtElement {
	property(1) name: String
    property(2) upperBound: KtTypeReference
    property(3) defaultValueExpression: KtExpression?
}

contract KtTypeReference : KtElement {
}

blueprint KtDirectTypeReference : KtTypeReference {
	property(1) path: List<String>
    property(2) genericTypeArguments: List<KtGenericTypeArgument>
    property(3) isNullable: Boolean
}

blueprint KtFunctionTypeReference : KtTypeReference {
	property(1) parameters: List<KtTypeReference>
    property(2) result: KtTypeReference
    property(3) isNullable: Boolean
    property(4) scope: KtTypeReference?
}

contract KtGenericTypeArgument : KtElement { }

blueprint KtDirectGenericTypeArgument : KtGenericTypeArgument {
	property(1) typeReference: KtTypeReference
}

blueprint KtStarGenericTypeArgument : KtGenericTypeArgument { }

blueprint KtClass : KtComponent, KtInterfaceMember, KtObjectMember, KtClassMember, KtScriptMember {
	property(1) name: String
	property(2) generics: List<KtGenericTypeDeclaration>
	property(3) superTypes: List<KtTypeReference>
	property(4) isDataClass: Boolean
	property(5) isValueClass: Boolean
	property(6) isSealed: Boolean
	property(7) primaryConstructorParameters: List<KtConstructorParameter>
	property(8) visibility: KtVisibility
	property(9) members: List<KtClassMember>
}

blueprint KtConstructorParameter : KtElement {
	property(1) name: String
    property(2) upperBound: KtTypeReference
    property(3) defaultValueExpression: KtExpression?
    property(4) propertyType: KtPropertyType?
    property(5) isOverride: Boolean
}

blueprint KtPropertyType : KtElement {
	value("value")
	variable("variable")

	property(1) code: String
}

blueprint KtVisibility : KtElement {
	public("public")
	internal("internal")
	protected("protected")
	private("private")

	property(1) code: String
}

blueprint KtGenericTypeDeclaration : KtElement {
	property(1) name: String
	property(2) variance: String?
	property(3) superType: KtTypeReference?
}

contract KtExpression : KtElement { }

blueprint KtCastExpression : KtExpression {
	property(1) expression: KtExpression
    property(2) target: KtExpression
    property(3) isConditionalCast: Boolean
}

blueprint KtInvokeExpression : KtExpression {
	property(1) function: KtExpression
	property(2) arguments: List<KtExpression>
}

blueprint KtLocalVariableDeclarationExpression : KtExpression {
	property(1) name: String
    property(2) upperBound: KtTypeReference?
    property(3) initialValue: KtExpression?
    property(4) isVariable: Boolean
}

blueprint KtMemberAccessExpression : KtExpression {
	property(1) supplier: KtExpression
    property(2) memberName: String
    property(3) isConditionalAccess: Boolean
    property(4) isReferencingAccess: Boolean
}

blueprint KtNameExpression : KtExpression {
	property(1) name: String
}

blueprint KtLambdaExpression : KtExpression {
	property(1) parameters: List<KtParameter>
    property(2) body: List<KtExpression>
}

blueprint KtStringLiteralExpression : KtExpression {
	property(1) value: String
    property(2) isTripleQuoted: Boolean
}

blueprint KtIntegerLiteralExpression : KtExpression {
	property(1) value: Int
}

blueprint KtReturnExpression : KtExpression {
	property(1) value: KtExpression?
}

blueprint KtTodoExpression : KtExpression {
	property(1) text: String?
}

blueprint KtPropertyGetExpression : KtExpression {
	property(1) supplierExpression: KtExpression
    property(2) propertyName: String
}

blueprint KtThisExpression : KtExpression {
	property(1) scopeName: String?
}

blueprint KtRawCodeExpression : KtExpression {
	property(1) code: String
}
